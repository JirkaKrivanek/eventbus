package com.kk.bus;


import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class RegisteredEventsTest {

    private static class EventA {}

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Test
    public void constructor_doesNotReturnNull() {
        RegisteredEvents registeredEvents = new RegisteredEvents();
        assertNotNull(registeredEvents);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Register_NoSubscribers_NoException {}

    @Test
    public void register_noSubscribers_noException() {
        Register_NoSubscribers_NoException objectToRegister = new Register_NoSubscribers_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.register(objectToRegister);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Register_NoSubscribers_Duplicate_NoException {}

    @Test
    public void register_duplicate_noException() {
        Register_NoSubscribers_Duplicate_NoException objectToRegister = new Register_NoSubscribers_Duplicate_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.register(objectToRegister);
        registeredEvents.register(objectToRegister);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Register_Subscribers_NoException {

        @Subscribe
        public void onEventA1(EventA event) {
        }
    }

    @Test
    public void register_subscribers_noException() {
        Register_Subscribers_NoException objectToRegister = new Register_Subscribers_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.register(objectToRegister);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Register_Subscribers_Duplicate_NoException {

        @Subscribe
        public void onEventA1(EventA event) {
        }
    }

    @Test
    public void register_subscribers_duplicate_noException() {
        Register_Subscribers_Duplicate_NoException objectToRegister = new Register_Subscribers_Duplicate_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.register(objectToRegister);
        registeredEvents.register(objectToRegister);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Unregister_NotRegistered_NoException {

        @Subscribe
        public void onEventA1(EventA event) {
        }
    }

    @Test
    public void unregister_notRegistered_noException() {
        Unregister_NotRegistered_NoException objectToRegister = new Unregister_NotRegistered_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.unregister(objectToRegister);
        registeredEvents.unregister(objectToRegister);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Unregister_Registered_NoException {

        @Subscribe
        public void onEventA1(EventA event) {
        }
    }

    @Test
    public void unregister_registered_noException() {
        Unregister_Registered_NoException objectToRegister = new Unregister_Registered_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.register(objectToRegister);
        registeredEvents.unregister(objectToRegister);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Unregister_Registered_Duplicate_NoException {

        @Subscribe
        public void onEventA1(EventA event) {
        }
    }

    @Test
    public void unregister_registered_duplicate_noException() {
        Unregister_Registered_Duplicate_NoException objectToRegister = new Unregister_Registered_Duplicate_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.register(objectToRegister);
        registeredEvents.unregister(objectToRegister);
        registeredEvents.unregister(objectToRegister);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Test
    public void post_unregistered_noException() {
        EventA event = new EventA();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.post(event);
        registeredEvents.post(event);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private static class Post_Registered_NoException {

        @Subscribe
        public void onEventA1(EventA event) {
        }
    }

    @Test
    public void post_registered_noException() {
        EventA event = new EventA();
        Post_Registered_NoException objectToRegister = new Post_Registered_NoException();
        RegisteredEvents registeredEvents = new RegisteredEvents();
        registeredEvents.register(objectToRegister);
        registeredEvents.post(event);
        registeredEvents.post(event);
        registeredEvents.unregister(objectToRegister);
        registeredEvents.post(event);
        registeredEvents.post(event);
    }
}
